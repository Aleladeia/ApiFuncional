Descrição passo a passo do processo de desenvolvimento da API

====== Criando Projeto ======
Primeiramente criamos o projeto ApiFuncional, na primeira aula deste Módulo -> Manipulando operações no banco de dados.

Em sequência apagamos a controller e classe que veio como base do projeto para ele ficar basicamente limpo, vazio,
após isso criamos o diretório Models onde vamos criar nossas entidades. 

====== Criando Entidade ======
A primeira entidade criada foi a de Produtos com as propriedades (Id, Nome, Preco, QuantidaEstoque e Descricao) além
das propriedades adicionamos algumas DataAnnotations, para ID, colocamos [Key], para as demais colocamos  a required
[Required(ErrorMessage = "O campo {0} é obrigatório")], além dela colocamos no preço uma DataAnnotation de Range
[Range(1, int.MaxValue, ErrorMessage = "O preço deve ser maior que zero")]

====== Configurando EF ======
Depois deste processo configuramos o EF Core, através da instalação de pacotes via Package Manager com os seguintes comandos
Install-Package Microsoft.EntityFrameworkCore.SqlServer, Fornece o suporte ao SQLServer
Install-Package Microsoft.EntityFrameworkCore.Design, serve para gerar os scripts
Install-Package Microsoft.EntityFrameworkCore.Tools, para suporte as funcionalidades de geração do próprio EF Core

Após instalar conferir as versões dos pacotes se batem com a versão do .Net Framework, se for o Net8.0 os pacotes devem ser
na versão 8. alguma coisa para evitar problemas e para que tudo funcione corretamente

Após isso adicionamos o diretório Data, para criarmos nosso DbContext, criamos então a ApiDbContext
está classe herda de DbContext do EntityFrameworkCore, e depois criamos o construtor da classe com alguns parametros
no caso passamos o parametro DbContextOptions que é o que nos permite definir a connection string e etc. Onde passamos para 
a classe base DbContext as opções pra saber onde conectar qual o banco e etc, o construtor ficou assim.
public ApiDbContext(DbContextOptions<ApiDbContext> options) : base(options){}

Depois do DbContext criado, passamos para a configuração da nossa Program.cs para dar suporte ao DbContext/SQLServer, para
isso adicionamos o seguinte código acima da var app = builder.Build(); Segue o código abaixo.
builder.Services.AddDbContext<ApiDbContext>(options =>
{
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"));
});

Este código acima adiciona o suporte ao DbContext, passamos a classe que ta implementando ele, definimos suas options
passando para usar o SqlServer e  para que ele vá até o arquivo de configuração do projeto que é o appsettings.json e pegue
a ConnectionString armazenada na chave DefaultConnection e vai usar ela como conexão do banco de dados.

====== Implementando Connection String ======
Após configurar todo o suporte ao EF, precisamos implementar a conexão do nosso banco de dados, para isso vamos ao arquivo de
configuração do projeto appsettings.json e adicionamos as seguintes chaves logo após "AllowedHosts": "*" passamos uma virgula e 
vamos para a próxima linha onde implementamos nossa connection string, ficou desta forma.

"ConnectionStrings": {
    "DefaultConnecion": "Server=(localdb)\\mssqllocaldb;Database=ApiFuncional;Trusted_Connection=True;MultipleActiveResultSets=true"
 }

 ====== Mapeando Uma Entidade ======
 Para isso vamos a nossa classe ApiDbContext e abaixo do construtor vamos criar uma propriedade do tipo Dbset de Produto
 ficando da seguinte forma public DbSet<Produto> Produtos{ get; set; }, isso indica ao DbContext que queremos criar uma tabela
 com as propriedades dessa classe, que no caso é a classe Produto, e ele já aproveita e segue as recomendações dos DataAnotattions

 Após isso precisamos adicionar uma migration, para isso vamos ao Console PM (Package Manager) e executamos o comando 
 Add-Migration "NOME", utilizamos o nome Inicial neste primeiro caso, após execuat o comando podemos observar que um diretório
 Migrations foi criado e nele consta 2 arquivos 1 com o mapeamento da entidade Produtos que é a configuração inicial e 1 outro
 arquivo chamado de Snapshot que é basicamente uma foto de como estava antes e como ficou depois, e sempre que vamos mexendo criando
 novas migrations ele vai gerando estas snapshots para saber como era o estado da aplicação antes e como ficou depois, permitindo 
 assim desfazer uma migration e volta-la para o estado anterior.

 Uma alternativa para o comando Add-Migration "NOME" é o comando dotnet ef migrations add "NOME" no Console e não no PM.

 ====== Criando o Banco de dados ======
 Após criar a migration podemos aplica-la no nosso banco de dados, desde que o endereço informado na connectionStrings esteja 
 apontando para um banco que funcione, nessa hora pode acontecer um problema. O comando para fazer a aplicação é o seguinte
 Update-Database este comando vai conectar ao banco para criar a tabela, e caso o banco não exista também vai cria-lo
 conectar nele e criar a tabela, se ele não conseguir fazer isso, a ConnectionStrings está com problemas.

 Comando alternativo para o Update-Database é o => dotnet ef database update no console e não no PM, após executar o comando
 podemos verificar no menu SQL Server Object Explorer, que pode ser acessado no visual studio através do menu View, que o banco
 e a tabela da nossa entidade foram criados.

 ====== Definindo os Action Results ======
 Neste ponto ja estamos com a API criada, EF configurado, Entidade criada e mapeada e o Banco de Dados Mapeado e Criado
 Agora partiremos para a manipulação dos registros através das operações via banco de dados. E isso será feito através das nossas
 Action Results da nossa Controller Produto.

 Criamos a controller com o nome ProdutosController.cs

 ====== Validando a entidade ======
 Nesta Aula, foi apresentado algumas formas alternativas e consideradas como boas práticas para a validação de entidades, onde não
 deixamos apenas como responsabilidade das data annotations, para isso fizemos um ajuste na nossa Program.cs onde no método/Service 
 AddControllers chamamos outro método ficando da seguinte forma abaixo, onde ela ignora os filtros de validação que adicionamos a 
 nossa model caso ela seja invalida.
 
 AddControllers().ConfigureApiBehaviorOptions(options =>
    {
        options.SuppressModelStateInvalidFilter = true; 
    });

pode parecer contráditório mas com essa configuração podemos adicionar melhores validações a nossas ActionResults como por exemplo
o que foi feito no método Post, onde validamos nossa ModelState caso seja invalidada, como está abaixo 3 exemplos, dessa forma
conseguimos retornar mais detalhes sobre o erro, até de forma personalizada, e tiramos a responsabilidade de ser totalmente das data
annotations.

if(!ModelState.IsValid) //Algumas formas de fazer nossas próprias validações
{
   //return BadRequest(ModelState); //funciona retorna os erros mas de forma simples.

   //return ValidationProblem(ModelState); //este é a boa pratica recomendada.

   return ValidationProblem(new ValidationProblemDetails(ModelState) //outra versão da boa pratica, só que personalizada
   {
       Title = "Um ou mais erros de validação ocorreram"
   });
}

 ====== Boas Praticas de Implementação ======
 Nesta aula realizamos a adoção de algumas boas praticas para nossa ProdutosController.cs, onde passamos alguns verificações
 para um retorno mais apropriado a cada situação, como por exemplo ao invés de retornar um null caso não exista a tabela Produtos
 retornamos um notfound, evitando o erro de nullPointer Exception, utilizamos esta abordagem no nosso método Get
if(_context.Produtos == null) //Evitando o erro de nullPointer exception
{
   return NotFound();
}

Já no nosso get por id, realizamos a abordagem acima e além dela, realizamos a abordagem abaixo, depois de realizar a consulta na tabela.
if (produto == null) //Evitando o erro de nullPointer exception caso não exista o produto com o ID solicitado
{
   return NotFound(); // se não existe retorna 404 not found
}

Para nosso Post usamos uma abordagem parecida, pois não adianta dar um Add na tabela se o produto não existe, vai acabar retornando um erro
500 retornando um null reference exception, e usando a forma abaixo isso é evitado e ainda da a oportunidade do cliente entrar em contato
e informar que a aplicação não está se comportando como deveria.
if(_context.Produtos == null)
{
   return Problem("Erro ao criar um produto, contate o suporte!");
}

Para o Put a abordagem mudou, primeiro substituimos o código de update na tabela deste abaixo
_context.Produtos.Update(produto); para este _context.Entry(produto).State = EntityState.Modified;
a diferença entre eles é que essa nova abordagem previne de um erro caracteristico do EF de entender que o objeto já foi manipulado em memória
e dizer que ele não pode atachar um objeto que já está atachado em memória, então o nosso novo código informa que o estado do objeto que estamos
enviando é modificado, então quando for feito o saveChanges ele já sabe que precisa realizar o update, então este caminho é o mais seguro.

Além disso fizemos a substituição do código await _context.SaveChangesAsync(); que salva as alterações no banco, por um try catch. Porque?
pois queremos evitar um problema de DbUpdateConcurrency, onde supondo que temos usuário A e B, o A está editando o produto Id 1 e manda salvar,
nesse mesmo tempo o B também mandou salvar, então chegam 2 solicitações de update ao mesmo tempo, isso pode dar o problema de concorrência no
banco de dados, para evitar este erro fazemos o tratamento do mesmo via o nosso Try Catch, por enquanto ficou desta forma
try
{
   await _context.SaveChangesAsync();
}
catch (DbUpdateConcurrencyException) 
{
   throw;
}

Porém antes mesmo de dar só um throw, seria interessante verificar se o produto existe, para dar um erro mais especifico. Então para isso criamos
após o nosso Delete, um método privado para fazer esta verificação. Segue abaixo.
private bool ProdutoExists(int id)
{
   return (_context.Produtos?.Any(e => e.Id == id)).GetValueOrDefault(); //O Any retorna um boolean, true ou false
}

após isso vamos utilizar este método junto com nosso try catch que fica da seguinte forma.
try
{
   await _context.SaveChangesAsync();
}
catch (DbUpdateConcurrencyException) 
{
   if (!ProdutoExists(id))
   {
      return NotFound();
   }
   else
   {
      throw;
   }
}

Agora no nosso Delete usamos as mesmas abordagens do nosso get por Id
Se a tabela não existir
if(_context.Produtos == null) 
{
   return NotFound();
}

Se o produto não existir
if (produto == null) 
{
   return NotFound();
}

E assim finalizamos a cobertura de boas práticas dos nossos requests, para melhorar ainda mais podemos ir ao nosso Projeto ApiFuncional e adicionar
ao <PropertyGroup> a seguinte configuração <IncludeOpenAPIAnalyzers>true</IncludeOpenAPIAnalyzers> onde o código vai começar a reclamar, para adicionarmos
as Produces que são algumas data annotations para os retornos de códigos Http, adiciona abaixo dos [HttpGet, Post, Put e etc] as seguintes linhas
[ProducesResponseType(StatusCodes.Status204NoContent)]
[ProducesResponseType(StatusCodes.Status404NotFound)]
[ProducesDefaultResponseType].

====== Segurança - Implementando o ASP.NET Identity ======

ASP.NET Identity = componente que da suporte a API para controle de usuários tanto na autenticação quanto na autorização. Trabalha a identidade de usuário
gera algumas tabelas no banco de dados.

Primeiramente para realizarmos a implementação do Identity precisamos fazer a instalação do pacote que vai dar suporte ao Identity no nosso banco de dados
e este conversa com o Identity através do Entity Framework Core, para instalar o componente, basta ir ao Package Manager e informar o comando
Install-Package Microsoft.AspNetCore.Identity.EntityFrameworkCore, isso pode ser diferente para outros bancos de dados, mas no nosso caso que é o SQL com EF
vai funcionar para este caso.

após instalado precisamos configurar na Program.cs, logo abaixo do AddDbContext adicionamos então o código abaixo
builder.Services.AddIdentity<IdentityUser, IdentityRole>()
    .AddRoles<IdentityRole>()
    .AddEntityFrameworkStores<ApiDbContext>();

Próximo passo é inserir o código abaixo exatamente na ordem que está, pois se for inversso a API não vai funcionar
app.UseAuthentication(); 
app.UseAuthorization();
este código é colocado logo após definirmos comportamento da nossa App, colocamos logo depois das configurações HTTP

Depois disso vamos a nosso arquivo de configuração do EF onde definimos o DbContext e alteramos a sua herança para IdentityDbContext que no fim
herda de DbContext.

após este passo vamos adicionar a Migration, para criar as tabelas que dão suporte ao Identity, e depois fazemos a atualização do nosso DataBase
para adicionar uma Migration usamos o comando Add-Migration Identity e depois para atualizar o banco Update-Database.

====== Segurança - Apresentando o JWT (Json web Token) ======

Gera um token que serve como credencial para nosso usuário validar se pode fazer algo ou não na nossa API

====== Segurança - Implementando o JWT na API ======

Primeiro passo é criar uma model JwtSettings.cs, nele adicionamos 4 propriedades, Segredo (string valor passado é um GUID), ExpiracaoHoras(int)
Emissor(string aplicação que emite o token), Audiencia(string, endereço da aplicação)

Segundo passo geramos as configurações no appsettings em uma nova chave com o mesmo nome da nossa classe "JwtSettings":{}

Terceiro passo adicionar o pacote JwtBearer com o comando Install-Package Microsoft.AspNetCore.Authentication.JwtBearer (suporte a emissão do Json web Token)

Quarto passo configurar na Program.cs com este código antes de definir o comportamento do nosso app. que é essa linha var app = builder.Build(); 
E depois da definição/configuração do Identity
    var JwtSettingsSection = builder.Configuration.GetSection("JwtSettings");
    builder.Services.Configure<JwtSettings>(JwtSettingsSection);

    var jwtSettings = JwtSettingsSection.Get<JwtSettings>();
    var key = Encoding.ASCII.GetBytes(jwtSettings.Segredo);

    builder.Services.AddAuthentication(options =>
    {
        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    }).AddJwtBearer(options =>
    {
        options.RequireHttpsMetadata = true;
        options.SaveToken = true;
        options.TokenValidationParameters = new TokenValidationParameters
        {
            IssuerSigningKey = new SymmetricSecurityKey(key),
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidAudience = jwtSettings.Audiencia,
            ValidIssuer = jwtSettings.Emissor
        };
    });

====== Segurança - Controller de Autenticação ======
Como gerar, validar o Token, implementação da controller que vai fazer tanto o registro do usuário como também o seu login 

Primeiro vamos criar uma nova Controller, que chamamos de AuthController, inicialmente ela ficou assim.

using Microsoft.AspNetCore.Mvc;

namespace ApiFuncional.Controllers
{

    [ApiController] //informa que é uma controller de API
    [Route("api/conta")]
    public class AuthController : ControllerBase
    {

        [HttpPost("registrar")]
        public async Task<IActionResult> Registrar() //criar usuário
        {
            return Ok();
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login() //autenticar usuário
        {
            return Ok();
        }
    }
}

Depois disso precisamos criar 2 Models a RegisterUserViewModel e a LoginUserViewModel como segue abaixo

//RegisterUserViewModel:
using System.ComponentModel.DataAnnotations;

namespace ApiFuncional.Models
{
    public class RegisterUserViewModel
    {
        [Required(ErrorMessage = "O campo {0} é obrigatório")]
        [EmailAddress(ErrorMessage = "O campo {0} está em formato inválido")]
        public string Email { get; set; }

        [Required(ErrorMessage = "O campo {0} é obrigatório")]
        [StringLength(100, ErrorMessage = "O campo {0} precisa ter entre {2} e {1} caracteres", MinimumLength = 6)]
        public string Password { get; set; }

        [Compare("Password", ErrorMessage = "As senhas não conferem")]
        public string ConfirmPassword { get; set; }

    }
}

//LoginUserViewModel:
using System.ComponentModel.DataAnnotations;

namespace ApiFuncional.Models
{
    public class LoginUserViewModel
    {
        [Required(ErrorMessage = "O campo {0} é obrigatório")]
        [EmailAddress(ErrorMessage = "O campo {0} está em formato inválido")]
        public string Email { get; set; }

        [Required(ErrorMessage = "O campo {0} é obrigatório")]
        [StringLength(100, ErrorMessage = "O campo {0} precisa ter entre {2} e {1} caracteres", MinimumLength = 6)]
        public string Password { get; set; }
    }
}

Após criarmos nossas models podemos voltar na nossa controller e passar nossas models como parametro para nossos métodos Registrar e Login
como está abaixo.

public async Task<IActionResult> Registrar(RegisterUserViewModel registerUser)

public async Task<IActionResult> Login(LoginUserViewModel loginUser)

E assim ja poemos fazer o uso do identity, mas pra isso precisamos injetar 3 dependências na nossa controller, acima dos Métodos Login e registrar

        private readonly SignInManager<IdentityUser> _signInManager; //gerenciador de signin
        private readonly UserManager<IdentityUser> _userManager; // trabalha o uso de metodos dos usuários
        private readonly JwtSettings _jwtSettings; // detalhes do Json web token pois vamos usala para emitir o token

        public AuthController(SignInManager<IdentityUser> signInManager, //Aqui é nosso construtor
                              UserManager<IdentityUser> userManager,
                              IOptions<JwtSettings> jwtSettings) //preciso passar esse IOptions porque ele é configurado como Options
        {
            _signInManager = signInManager;
            _userManager = userManager;
            _jwtSettings = jwtSettings.Value;
        } // fim do construtor

isso vai ficar acima da data annotation [HttpPost("registrar")].

com essas depêndencias usadas podemos fazer o uso delas, e nossos Métodos ficam dessa forma a sua implementação.
//Registrar:

            if(!ModelState.IsValid) return ValidationProblem(ModelState); //validando estado da Model

            var user = new IdentityUser //criando um novo IdentityUser
            {
                UserName = registerUser.Email,
                Email = registerUser.Email,
                EmailConfirmed = true
            };

            var result = await _userManager.CreateAsync(user, registerUser.Password); // Aqui retorna um objeto do Indentity

            if(result.Succeeded) //se obter sucesso,  vai gerar o nosso Token
            {
                await _signInManager.SignInAsync(user, false);
                return Ok(GerarJwt());
            }

            return Problem("Falha ao registrar o usuário"); // caso der algum problema retorna esta mensagem de erro

//Login:
            if (!ModelState.IsValid) return ValidationProblem(ModelState); // igual ao  de Registrar

            //se tudo certo retorna o objeto com os dados necessários para gerar o token, os 2 ultimos parametros são para
            //não persistir o usuário logado(false), e para caso falhe no login 5 vezes o usuário fica travado por 15 minutos(true)
            var result = await _signInManager.PasswordSignInAsync(loginUser.Email, loginUser.Password, false, true); 

            if(result.Succeeded)
            {
                return Ok(GerarJwt()); //  Gera o token se tudo certo
            }

            return Problem("Usuário ou senha incorretos");

após isso precisamos criar o o método que vai gerar o token, que não foi implementado ainda, nosso método é o GerarJwt, segue abaixo 
sua implementação.

        private string GerarJwt()
        {
            var tokenHandler = new JwtSecurityTokenHandler(); //manipulador de token
            var key = Encoding.ASCII.GetBytes(_jwtSettings.Segredo); //com base no segredo que foi feito encode de uma sequencia de bytes da nossa chave

            var token = tokenHandler.CreateToken(new SecurityTokenDescriptor // vamos criar o token com este método
            {
                Issuer = _jwtSettings.Emissor, //definindo emissor
                Audience = _jwtSettings.Audiencia, // audiencia
                Expires = DateTime.UtcNow.AddHours(_jwtSettings.ExpiracaoHoras), //tempo de expiração
                //utilizando a chave encodade e um algoritmo usado para assinar o token e assim ja temos nosso token gerado 
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            });

            var encodedToken = tokenHandler.WriteToken(token); //como retorna em um formato de securityToken precisamos converter para string

            return encodedToken; //e retorna nosso token
        }

E pronto está configurado o nosso JWT, para validar podemos acessar o site https://jwt.io/ colar o token no campo encoded, e informar a assinatura que definimos
no appsettings no campo verify signature, mas este é um dado sensivel apenas para validar o token, nunca deve sair de lá do appsettings e essa chave nunca
estara disponivel para um usuário que quer burlar o sistema.


====== Segurança - Suporte a JWT no Swagger ======
Vamos ter que fazer uma alteração na nossa Program.cs onde adicionamos o Swagger
vai sair disso.

builder.Services.AddSwaggerGen();

Para isso abaixo:
Antes apenas adicionamos o gerador do Swagger builder.Services.AddSwaggerGen(), agora estamos adicionando mais algumas configurações

builder.Services.AddSwaggerGen(c =>
{
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description = "Insira o token JWT desta maneira: Bearer {seu token}",
        Name = "Authorization",
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.ApiKey
    });

    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[]{}
        }
    });
});

Após inserir este código e rodarmos a aplicação, podemos ver ao lado direito do swagger um botão de Authorize com um cadeado, e também em todos os outros endpoints.

====== Segurança - Autenticação via JWT ======

Para utilizar nossa autenticação, vamos a nossa controller ProdutosController e colocar o atributo/dataAnnotation [Authorize] bem acima da declaração da classe
acima do atributo [ApiController]

depois se quisermos abrir algumas excessões em endpoints especificos que podemos deixar ser usado sem necessidade de autorização podemos passar
o atributo [AllowAnonymous] que vai permitir usuários não autorizados a usar o endpoint, ele desfaz o que o Authorize faz.

A boa pratica é essa, negar o acesso a todo usuário anonimo ou sem autorização e ir abrindo excessões. 

====== Segurança - Autorização via JWT ======

Nesta aula vimos como implementar a autorização através do uso de roles para os usuários, para isso primeiro definimos no nosso endpoint de Delete 
a data annotation [Authorize(Roles = "Admin")], após definirmos isso os usuários que não possuem este role, não conseguem fazer o uso do endpoint

para dar permissão configuramos uma role em nosso usuário diretamente no banco de dados, primeiro fomos até a tabela AspNetUsers e pegamos o Id de um
usuário que queremos dar está role/permissão, segue o Id => 921e8a9a-1bf2-419c-8e52-49c4016a1378, após isso fomos para a tabela AspNetRoles e adicionamos
um novo registro, Id = 1, Name = Admin, NormalizedName = ADMIN, ConcurrencyStamp = b1a791a1-6f47-4a57-ad8e-b5c82c6aa761 <= isso é um GUID. O Proximo passo
foi ir a tabela AspNetUserRoles e também adicionar um novo registro, nesta tabela é feita a amarração entre usuário e role no campo UserId passamos o id 
do usuário que copiamos anteriormente e no campo RoleId, passamos o Id da role que criamos, ficou desta forma UserId = 921e8a9a-1bf2-419c-8e52-49c4016a1378, RoleId = 1

Próximo passo após vincular nosso usuário a uma role é adaptar nosso método GerarJwt(), que ficou assim agora.

private async Task<string> GerarJwt(string email) // mudamos a assinatura, anteriormente era  private string GerarJwt()
        {
            var user = await _userManager.FindByEmailAsync(email); // linhas novas
            var roles = await _userManager.GetRolesAsync(user);    

            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.UserName),
            };

            // Adicionar roles como claims
            foreach (var role in roles)
            {
                claims.Add(new Claim(ClaimTypes.Role, role));
            }                                                      // Fim linhas novas

            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_jwtSettings.Segredo);

            var token = tokenHandler.CreateToken(new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(claims),             // Linha nova
                Issuer = _jwtSettings.Emissor,
                Audience = _jwtSettings.Audiencia,
                Expires = DateTime.UtcNow.AddHours(_jwtSettings.ExpiracaoHoras),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            });

            var encodedToken = tokenHandler.WriteToken(token);

            return encodedToken;
        }

Por fim precisamos alterar também nossos endpoint de regisro e de login que fazem o uso desta função

Em registrar sai de return Ok(GerarJwt()); para return Ok(await GerarJwt(user.Email));  
Em login sai de return Ok(GerarJwt()); para return Ok(await GerarJwt(loginUser.Email));

E pronto finalizamos a implementação das roles para os usuários e as mesmas são passadas ao nosso token com os ajustes feitos na função GerarJwt()

====== Segurança - HTTPS ======

entendendo a importância do uso do HTTPS, dentro da nossa api vamos obrigar o uso deste protocolo.
O mesmo já vem por padrão configurado na nossa Program.cs onde utilizamos o middleware app.UseHttpsRedirection();